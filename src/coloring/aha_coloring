import numpy as np
from matplotlib import ticker, colorbar, pyplot

from src.aha import aha_segmental_values


#TODO: Handle coloring of different types in this class

class AHAColoring:
    def __init__(
        self, segments: aha_segmental_values.AHASegmentalValues, ax: pyplot.Axes, fig: pyplot.Figure
    ):
        self.segments = segments
        self.ax = ax
        self.fig = fig
        self.norm

    def _add_color_bar(self, units: str = "Units", cmap: str = "jet", norm=None):
        bar = self.fig.add_axes([0.05, 0.1, 0.2, 0.05])
        cb1 = colorbar.ColorbarBase(bar, cmap=cmap, norm=norm, orientation="horizontal")
        cb1.set_label(units, size=16)
        cb1.ax.tick_params(labelsize=14, which="major")

    def _color_plot(self, cmap: str = "jet", norm=None, smooth_contour=False):
        extended_radial_position = np.repeat(
            self.ip.radial_position[:, np.newaxis], self.ip.resolution[0], axis=1
        ).T
        extended_radial_angle = np.repeat(
            self.theta[:, np.newaxis], extended_radial_position.shape[1], axis=1
        )
        ravelled_segment_values = np.array(self.interpolated_segment_values).T

        if smooth_contour:
            levels = ticker.MaxNLocator(nbins=12).tick_values(-30, 30)
            self.ax.contourf(
                extended_radial_angle,
                extended_radial_position,
                ravelled_segment_values,
                cmap=cmap,
                levels=levels,
            )
        else:
            self.ax.pcolormesh(
                extended_radial_angle,
                extended_radial_position,
                ravelled_segment_values,
                cmap=cmap,
                norm=norm,
            )
